

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Image_Processing is
	port (
		avs_s0_address         : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- address
		avs_s0_read            : in  std_logic                     := 'X';             -- read
		avs_s0_readdata        : out std_logic_vector(31 downto 0);                    -- readdata
		avs_s0_write           : in  std_logic                     := 'X';             -- write
		avs_s0_writedata       : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
		
		clock_clk              : in  std_logic                     := 'X';             -- clk
		reset_reset            : in  std_logic                     := 'X';             -- reset
		
		asi_in0_data           : in  std_logic_vector(15 downto 0) := (others => 'X'); -- data
		asi_in0_ready          : out std_logic;                                        -- ready
		asi_in0_valid          : in  std_logic                     := 'X';             -- valid
		asi_in0_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
		asi_in0_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
		aso_out0_data          : out std_logic_vector(15 downto 0);                    -- data
		aso_out0_ready         : in  std_logic                     := 'X';             -- ready
		aso_out0_valid         : out std_logic;                                        -- valid
		aso_out0_endofpacket   : out std_logic;                                        -- endofpacket
		aso_out0_startofpacket : out std_logic                                         --         .valid
	);
end entity Image_Processing;

architecture rtl of Image_Processing is
signal r, r_out : std_logic_vector(4 downto 0);
signal g, g_out : std_logic_vector(5 downto 0);
signal b, b_out : std_logic_vector(4 downto 0);

signal parametar 			: std_logic_vector(31 downto 0);

begin

	-- image color extraction
	r <= asi_in0_data(15 downto 11);
	g <= asi_in0_data(10 downto 5);
	b <= asi_in0_data(4 downto 0);
	
	--Forward Avalon stream lines
	aso_out0_endofpacket <= asi_in0_endofpacket;
	aso_out0_startofpacket <= asi_in0_startofpacket;
	aso_out0_valid <= asi_in0_valid;
	asi_in0_ready <= aso_out0_ready;
	
	--Blending operation
	--r_out <= std_logic_vector(to_unsigned(((to_integer(unsigned(alpha))*to_integer(unsigned(r1)) + (1000-to_integer(unsigned(alpha)))*to_integer(unsigned(r2)))/1000), r_out'length));
	--g_out <= std_logic_vector(to_unsigned(((to_integer(unsigned(alpha))*to_integer(unsigned(g1)) + (1000-to_integer(unsigned(alpha)))*to_integer(unsigned(g2)))/1000), g_out'length));
	--b_out <= std_logic_vector(to_unsigned(((to_integer(unsigned(alpha))*to_integer(unsigned(b1)) + (1000-to_integer(unsigned(alpha)))*to_integer(unsigned(b2)))/1000), b_out'length));
	
	--Concatenate blended image components
	aso_out0_data <= r & g & b;
	
	--Receive alpha factor from Avalon Memory Mapped interface
	write_proc: process(clock_clk)
	begin
    if rising_edge(clock_clk) then
        if avs_s0_write = '1' then
            parametar <= avs_s0_writedata;
        end if;
    end if;
	end process;

	
end architecture rtl;

// VideoBox.v

// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module VideoBox (
		output wire [9:0]  led_bus_export,     //     led_bus.export
		output wire [14:0] memory_mem_a,       //      memory.mem_a
		output wire [2:0]  memory_mem_ba,      //            .mem_ba
		output wire        memory_mem_ck,      //            .mem_ck
		output wire        memory_mem_ck_n,    //            .mem_ck_n
		output wire        memory_mem_cke,     //            .mem_cke
		output wire        memory_mem_cs_n,    //            .mem_cs_n
		output wire        memory_mem_ras_n,   //            .mem_ras_n
		output wire        memory_mem_cas_n,   //            .mem_cas_n
		output wire        memory_mem_we_n,    //            .mem_we_n
		output wire        memory_mem_reset_n, //            .mem_reset_n
		inout  wire [31:0] memory_mem_dq,      //            .mem_dq
		inout  wire [3:0]  memory_mem_dqs,     //            .mem_dqs
		inout  wire [3:0]  memory_mem_dqs_n,   //            .mem_dqs_n
		output wire        memory_mem_odt,     //            .mem_odt
		output wire [3:0]  memory_mem_dm,      //            .mem_dm
		input  wire        memory_oct_rzqin,   //            .oct_rzqin
		input  wire        ref_clock_clk,      //   ref_clock.clk
		output wire [12:0] sdram_bus_addr,     //   sdram_bus.addr
		output wire [1:0]  sdram_bus_ba,       //            .ba
		output wire        sdram_bus_cas_n,    //            .cas_n
		output wire        sdram_bus_cke,      //            .cke
		output wire        sdram_bus_cs_n,     //            .cs_n
		inout  wire [15:0] sdram_bus_dq,       //            .dq
		output wire [1:0]  sdram_bus_dqm,      //            .dqm
		output wire        sdram_bus_ras_n,    //            .ras_n
		output wire        sdram_bus_we_n,     //            .we_n
		output wire        sdram_clock_clk,    // sdram_clock.clk
		output wire        vga_bus_CLK,        //     vga_bus.CLK
		output wire        vga_bus_HS,         //            .HS
		output wire        vga_bus_VS,         //            .VS
		output wire        vga_bus_BLANK,      //            .BLANK
		output wire        vga_bus_SYNC,       //            .SYNC
		output wire [7:0]  vga_bus_R,          //            .R
		output wire [7:0]  vga_bus_G,          //            .G
		output wire [7:0]  vga_bus_B           //            .B
	);

	wire         video_dual_clock_buffer_avalon_dc_buffer_source_valid;                     // video_dual_clock_buffer:stream_out_valid -> video_rgb_resampler_0:stream_in_valid
	wire  [15:0] video_dual_clock_buffer_avalon_dc_buffer_source_data;                      // video_dual_clock_buffer:stream_out_data -> video_rgb_resampler_0:stream_in_data
	wire         video_dual_clock_buffer_avalon_dc_buffer_source_ready;                     // video_rgb_resampler_0:stream_in_ready -> video_dual_clock_buffer:stream_out_ready
	wire         video_dual_clock_buffer_avalon_dc_buffer_source_startofpacket;             // video_dual_clock_buffer:stream_out_startofpacket -> video_rgb_resampler_0:stream_in_startofpacket
	wire         video_dual_clock_buffer_avalon_dc_buffer_source_endofpacket;               // video_dual_clock_buffer:stream_out_endofpacket -> video_rgb_resampler_0:stream_in_endofpacket
	wire         vide_dma_controller_avalon_pixel_source_valid;                             // vide_dma_controller:stream_valid -> Alpha_Blender_stream_0:asi_in0_valid
	wire  [31:0] vide_dma_controller_avalon_pixel_source_data;                              // vide_dma_controller:stream_data -> Alpha_Blender_stream_0:asi_in0_data
	wire         vide_dma_controller_avalon_pixel_source_ready;                             // Alpha_Blender_stream_0:asi_in0_ready -> vide_dma_controller:stream_ready
	wire         vide_dma_controller_avalon_pixel_source_startofpacket;                     // vide_dma_controller:stream_startofpacket -> Alpha_Blender_stream_0:asi_in0_startofpacket
	wire         vide_dma_controller_avalon_pixel_source_endofpacket;                       // vide_dma_controller:stream_endofpacket -> Alpha_Blender_stream_0:asi_in0_endofpacket
	wire         video_rgb_resampler_0_avalon_rgb_source_valid;                             // video_rgb_resampler_0:stream_out_valid -> video_vga_controller:valid
	wire  [29:0] video_rgb_resampler_0_avalon_rgb_source_data;                              // video_rgb_resampler_0:stream_out_data -> video_vga_controller:data
	wire         video_rgb_resampler_0_avalon_rgb_source_ready;                             // video_vga_controller:ready -> video_rgb_resampler_0:stream_out_ready
	wire         video_rgb_resampler_0_avalon_rgb_source_startofpacket;                     // video_rgb_resampler_0:stream_out_startofpacket -> video_vga_controller:startofpacket
	wire         video_rgb_resampler_0_avalon_rgb_source_endofpacket;                       // video_rgb_resampler_0:stream_out_endofpacket -> video_vga_controller:endofpacket
	wire         alpha_blender_stream_0_out0_valid;                                         // Alpha_Blender_stream_0:aso_out0_valid -> video_dual_clock_buffer:stream_in_valid
	wire  [15:0] alpha_blender_stream_0_out0_data;                                          // Alpha_Blender_stream_0:aso_out0_data -> video_dual_clock_buffer:stream_in_data
	wire         alpha_blender_stream_0_out0_ready;                                         // video_dual_clock_buffer:stream_in_ready -> Alpha_Blender_stream_0:aso_out0_ready
	wire         alpha_blender_stream_0_out0_startofpacket;                                 // Alpha_Blender_stream_0:aso_out0_startofpacket -> video_dual_clock_buffer:stream_in_startofpacket
	wire         alpha_blender_stream_0_out0_endofpacket;                                   // Alpha_Blender_stream_0:aso_out0_endofpacket -> video_dual_clock_buffer:stream_in_endofpacket
	wire         vga_pll_outclk0_clk;                                                       // vga_pll:outclk_0 -> [rst_controller_001:clk, video_dual_clock_buffer:clk_stream_out, video_rgb_resampler_0:clk, video_vga_controller:clk]
	wire         sys_sdram_pll_sys_clk_clk;                                                 // sys_sdram_pll:sys_clk_clk -> [Alpha_Blender_stream_0:clock_clk, DMA_CONTROLLER_CITANJE:clk, DMA_CONTROLLER_UPIS:clk, affine_matrix:clk, affine_matrix:clk2, histogram_memory:clk, histogram_memory:clk2, hps:h2f_axi_clk, hps:h2f_lw_axi_clk, led_indication:clk, mm_interconnect_0:sys_sdram_pll_sys_clk_clk, mm_interconnect_1:sys_sdram_pll_sys_clk_clk, rst_controller:clk, rst_controller_002:clk, sdram_controller:clk, vga_pll:refclk, vide_dma_controller:clk, video_dual_clock_buffer:clk_stream_in]
	wire         hps_h2f_reset_reset;                                                       // hps:h2f_rst_n -> [rst_controller_002:reset_in0, sys_sdram_pll:ref_reset_reset]
	wire         sys_sdram_pll_reset_source_reset;                                          // sys_sdram_pll:reset_source_reset -> [rst_controller:reset_in0, rst_controller_001:reset_in0, vga_pll:rst]
	wire         vide_dma_controller_avalon_dma_master_waitrequest;                         // mm_interconnect_0:vide_dma_controller_avalon_dma_master_waitrequest -> vide_dma_controller:master_waitrequest
	wire  [31:0] vide_dma_controller_avalon_dma_master_readdata;                            // mm_interconnect_0:vide_dma_controller_avalon_dma_master_readdata -> vide_dma_controller:master_readdata
	wire  [31:0] vide_dma_controller_avalon_dma_master_address;                             // vide_dma_controller:master_address -> mm_interconnect_0:vide_dma_controller_avalon_dma_master_address
	wire         vide_dma_controller_avalon_dma_master_read;                                // vide_dma_controller:master_read -> mm_interconnect_0:vide_dma_controller_avalon_dma_master_read
	wire         vide_dma_controller_avalon_dma_master_readdatavalid;                       // mm_interconnect_0:vide_dma_controller_avalon_dma_master_readdatavalid -> vide_dma_controller:master_readdatavalid
	wire         vide_dma_controller_avalon_dma_master_lock;                                // vide_dma_controller:master_arbiterlock -> mm_interconnect_0:vide_dma_controller_avalon_dma_master_lock
	wire   [1:0] hps_h2f_axi_master_awburst;                                                // hps:h2f_AWBURST -> mm_interconnect_0:hps_h2f_axi_master_awburst
	wire   [3:0] hps_h2f_axi_master_arlen;                                                  // hps:h2f_ARLEN -> mm_interconnect_0:hps_h2f_axi_master_arlen
	wire   [7:0] hps_h2f_axi_master_wstrb;                                                  // hps:h2f_WSTRB -> mm_interconnect_0:hps_h2f_axi_master_wstrb
	wire         hps_h2f_axi_master_wready;                                                 // mm_interconnect_0:hps_h2f_axi_master_wready -> hps:h2f_WREADY
	wire  [11:0] hps_h2f_axi_master_rid;                                                    // mm_interconnect_0:hps_h2f_axi_master_rid -> hps:h2f_RID
	wire         hps_h2f_axi_master_rready;                                                 // hps:h2f_RREADY -> mm_interconnect_0:hps_h2f_axi_master_rready
	wire   [3:0] hps_h2f_axi_master_awlen;                                                  // hps:h2f_AWLEN -> mm_interconnect_0:hps_h2f_axi_master_awlen
	wire  [11:0] hps_h2f_axi_master_wid;                                                    // hps:h2f_WID -> mm_interconnect_0:hps_h2f_axi_master_wid
	wire   [3:0] hps_h2f_axi_master_arcache;                                                // hps:h2f_ARCACHE -> mm_interconnect_0:hps_h2f_axi_master_arcache
	wire         hps_h2f_axi_master_wvalid;                                                 // hps:h2f_WVALID -> mm_interconnect_0:hps_h2f_axi_master_wvalid
	wire  [29:0] hps_h2f_axi_master_araddr;                                                 // hps:h2f_ARADDR -> mm_interconnect_0:hps_h2f_axi_master_araddr
	wire   [2:0] hps_h2f_axi_master_arprot;                                                 // hps:h2f_ARPROT -> mm_interconnect_0:hps_h2f_axi_master_arprot
	wire   [2:0] hps_h2f_axi_master_awprot;                                                 // hps:h2f_AWPROT -> mm_interconnect_0:hps_h2f_axi_master_awprot
	wire  [63:0] hps_h2f_axi_master_wdata;                                                  // hps:h2f_WDATA -> mm_interconnect_0:hps_h2f_axi_master_wdata
	wire         hps_h2f_axi_master_arvalid;                                                // hps:h2f_ARVALID -> mm_interconnect_0:hps_h2f_axi_master_arvalid
	wire   [3:0] hps_h2f_axi_master_awcache;                                                // hps:h2f_AWCACHE -> mm_interconnect_0:hps_h2f_axi_master_awcache
	wire  [11:0] hps_h2f_axi_master_arid;                                                   // hps:h2f_ARID -> mm_interconnect_0:hps_h2f_axi_master_arid
	wire   [1:0] hps_h2f_axi_master_arlock;                                                 // hps:h2f_ARLOCK -> mm_interconnect_0:hps_h2f_axi_master_arlock
	wire   [1:0] hps_h2f_axi_master_awlock;                                                 // hps:h2f_AWLOCK -> mm_interconnect_0:hps_h2f_axi_master_awlock
	wire  [29:0] hps_h2f_axi_master_awaddr;                                                 // hps:h2f_AWADDR -> mm_interconnect_0:hps_h2f_axi_master_awaddr
	wire   [1:0] hps_h2f_axi_master_bresp;                                                  // mm_interconnect_0:hps_h2f_axi_master_bresp -> hps:h2f_BRESP
	wire         hps_h2f_axi_master_arready;                                                // mm_interconnect_0:hps_h2f_axi_master_arready -> hps:h2f_ARREADY
	wire  [63:0] hps_h2f_axi_master_rdata;                                                  // mm_interconnect_0:hps_h2f_axi_master_rdata -> hps:h2f_RDATA
	wire         hps_h2f_axi_master_awready;                                                // mm_interconnect_0:hps_h2f_axi_master_awready -> hps:h2f_AWREADY
	wire   [1:0] hps_h2f_axi_master_arburst;                                                // hps:h2f_ARBURST -> mm_interconnect_0:hps_h2f_axi_master_arburst
	wire   [2:0] hps_h2f_axi_master_arsize;                                                 // hps:h2f_ARSIZE -> mm_interconnect_0:hps_h2f_axi_master_arsize
	wire         hps_h2f_axi_master_bready;                                                 // hps:h2f_BREADY -> mm_interconnect_0:hps_h2f_axi_master_bready
	wire         hps_h2f_axi_master_rlast;                                                  // mm_interconnect_0:hps_h2f_axi_master_rlast -> hps:h2f_RLAST
	wire         hps_h2f_axi_master_wlast;                                                  // hps:h2f_WLAST -> mm_interconnect_0:hps_h2f_axi_master_wlast
	wire   [1:0] hps_h2f_axi_master_rresp;                                                  // mm_interconnect_0:hps_h2f_axi_master_rresp -> hps:h2f_RRESP
	wire  [11:0] hps_h2f_axi_master_awid;                                                   // hps:h2f_AWID -> mm_interconnect_0:hps_h2f_axi_master_awid
	wire  [11:0] hps_h2f_axi_master_bid;                                                    // mm_interconnect_0:hps_h2f_axi_master_bid -> hps:h2f_BID
	wire         hps_h2f_axi_master_bvalid;                                                 // mm_interconnect_0:hps_h2f_axi_master_bvalid -> hps:h2f_BVALID
	wire   [2:0] hps_h2f_axi_master_awsize;                                                 // hps:h2f_AWSIZE -> mm_interconnect_0:hps_h2f_axi_master_awsize
	wire         hps_h2f_axi_master_awvalid;                                                // hps:h2f_AWVALID -> mm_interconnect_0:hps_h2f_axi_master_awvalid
	wire         hps_h2f_axi_master_rvalid;                                                 // mm_interconnect_0:hps_h2f_axi_master_rvalid -> hps:h2f_RVALID
	wire         mm_interconnect_0_sdram_controller_s1_chipselect;                          // mm_interconnect_0:sdram_controller_s1_chipselect -> sdram_controller:az_cs
	wire  [15:0] mm_interconnect_0_sdram_controller_s1_readdata;                            // sdram_controller:za_data -> mm_interconnect_0:sdram_controller_s1_readdata
	wire         mm_interconnect_0_sdram_controller_s1_waitrequest;                         // sdram_controller:za_waitrequest -> mm_interconnect_0:sdram_controller_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_controller_s1_address;                             // mm_interconnect_0:sdram_controller_s1_address -> sdram_controller:az_addr
	wire         mm_interconnect_0_sdram_controller_s1_read;                                // mm_interconnect_0:sdram_controller_s1_read -> sdram_controller:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_controller_s1_byteenable;                          // mm_interconnect_0:sdram_controller_s1_byteenable -> sdram_controller:az_be_n
	wire         mm_interconnect_0_sdram_controller_s1_readdatavalid;                       // sdram_controller:za_valid -> mm_interconnect_0:sdram_controller_s1_readdatavalid
	wire         mm_interconnect_0_sdram_controller_s1_write;                               // mm_interconnect_0:sdram_controller_s1_write -> sdram_controller:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_controller_s1_writedata;                           // mm_interconnect_0:sdram_controller_s1_writedata -> sdram_controller:az_data
	wire         mm_interconnect_0_affine_matrix_s1_chipselect;                             // mm_interconnect_0:affine_matrix_s1_chipselect -> affine_matrix:chipselect
	wire  [31:0] mm_interconnect_0_affine_matrix_s1_readdata;                               // affine_matrix:readdata -> mm_interconnect_0:affine_matrix_s1_readdata
	wire   [9:0] mm_interconnect_0_affine_matrix_s1_address;                                // mm_interconnect_0:affine_matrix_s1_address -> affine_matrix:address
	wire   [3:0] mm_interconnect_0_affine_matrix_s1_byteenable;                             // mm_interconnect_0:affine_matrix_s1_byteenable -> affine_matrix:byteenable
	wire         mm_interconnect_0_affine_matrix_s1_write;                                  // mm_interconnect_0:affine_matrix_s1_write -> affine_matrix:write
	wire  [31:0] mm_interconnect_0_affine_matrix_s1_writedata;                              // mm_interconnect_0:affine_matrix_s1_writedata -> affine_matrix:writedata
	wire         mm_interconnect_0_affine_matrix_s1_clken;                                  // mm_interconnect_0:affine_matrix_s1_clken -> affine_matrix:clken
	wire         mm_interconnect_0_histogram_memory_s1_chipselect;                          // mm_interconnect_0:histogram_memory_s1_chipselect -> histogram_memory:chipselect
	wire  [31:0] mm_interconnect_0_histogram_memory_s1_readdata;                            // histogram_memory:readdata -> mm_interconnect_0:histogram_memory_s1_readdata
	wire   [9:0] mm_interconnect_0_histogram_memory_s1_address;                             // mm_interconnect_0:histogram_memory_s1_address -> histogram_memory:address
	wire   [3:0] mm_interconnect_0_histogram_memory_s1_byteenable;                          // mm_interconnect_0:histogram_memory_s1_byteenable -> histogram_memory:byteenable
	wire         mm_interconnect_0_histogram_memory_s1_write;                               // mm_interconnect_0:histogram_memory_s1_write -> histogram_memory:write
	wire  [31:0] mm_interconnect_0_histogram_memory_s1_writedata;                           // mm_interconnect_0:histogram_memory_s1_writedata -> histogram_memory:writedata
	wire         mm_interconnect_0_histogram_memory_s1_clken;                               // mm_interconnect_0:histogram_memory_s1_clken -> histogram_memory:clken
	wire   [1:0] hps_h2f_lw_axi_master_awburst;                                             // hps:h2f_lw_AWBURST -> mm_interconnect_1:hps_h2f_lw_axi_master_awburst
	wire   [3:0] hps_h2f_lw_axi_master_arlen;                                               // hps:h2f_lw_ARLEN -> mm_interconnect_1:hps_h2f_lw_axi_master_arlen
	wire   [3:0] hps_h2f_lw_axi_master_wstrb;                                               // hps:h2f_lw_WSTRB -> mm_interconnect_1:hps_h2f_lw_axi_master_wstrb
	wire         hps_h2f_lw_axi_master_wready;                                              // mm_interconnect_1:hps_h2f_lw_axi_master_wready -> hps:h2f_lw_WREADY
	wire  [11:0] hps_h2f_lw_axi_master_rid;                                                 // mm_interconnect_1:hps_h2f_lw_axi_master_rid -> hps:h2f_lw_RID
	wire         hps_h2f_lw_axi_master_rready;                                              // hps:h2f_lw_RREADY -> mm_interconnect_1:hps_h2f_lw_axi_master_rready
	wire   [3:0] hps_h2f_lw_axi_master_awlen;                                               // hps:h2f_lw_AWLEN -> mm_interconnect_1:hps_h2f_lw_axi_master_awlen
	wire  [11:0] hps_h2f_lw_axi_master_wid;                                                 // hps:h2f_lw_WID -> mm_interconnect_1:hps_h2f_lw_axi_master_wid
	wire   [3:0] hps_h2f_lw_axi_master_arcache;                                             // hps:h2f_lw_ARCACHE -> mm_interconnect_1:hps_h2f_lw_axi_master_arcache
	wire         hps_h2f_lw_axi_master_wvalid;                                              // hps:h2f_lw_WVALID -> mm_interconnect_1:hps_h2f_lw_axi_master_wvalid
	wire  [20:0] hps_h2f_lw_axi_master_araddr;                                              // hps:h2f_lw_ARADDR -> mm_interconnect_1:hps_h2f_lw_axi_master_araddr
	wire   [2:0] hps_h2f_lw_axi_master_arprot;                                              // hps:h2f_lw_ARPROT -> mm_interconnect_1:hps_h2f_lw_axi_master_arprot
	wire   [2:0] hps_h2f_lw_axi_master_awprot;                                              // hps:h2f_lw_AWPROT -> mm_interconnect_1:hps_h2f_lw_axi_master_awprot
	wire  [31:0] hps_h2f_lw_axi_master_wdata;                                               // hps:h2f_lw_WDATA -> mm_interconnect_1:hps_h2f_lw_axi_master_wdata
	wire         hps_h2f_lw_axi_master_arvalid;                                             // hps:h2f_lw_ARVALID -> mm_interconnect_1:hps_h2f_lw_axi_master_arvalid
	wire   [3:0] hps_h2f_lw_axi_master_awcache;                                             // hps:h2f_lw_AWCACHE -> mm_interconnect_1:hps_h2f_lw_axi_master_awcache
	wire  [11:0] hps_h2f_lw_axi_master_arid;                                                // hps:h2f_lw_ARID -> mm_interconnect_1:hps_h2f_lw_axi_master_arid
	wire   [1:0] hps_h2f_lw_axi_master_arlock;                                              // hps:h2f_lw_ARLOCK -> mm_interconnect_1:hps_h2f_lw_axi_master_arlock
	wire   [1:0] hps_h2f_lw_axi_master_awlock;                                              // hps:h2f_lw_AWLOCK -> mm_interconnect_1:hps_h2f_lw_axi_master_awlock
	wire  [20:0] hps_h2f_lw_axi_master_awaddr;                                              // hps:h2f_lw_AWADDR -> mm_interconnect_1:hps_h2f_lw_axi_master_awaddr
	wire   [1:0] hps_h2f_lw_axi_master_bresp;                                               // mm_interconnect_1:hps_h2f_lw_axi_master_bresp -> hps:h2f_lw_BRESP
	wire         hps_h2f_lw_axi_master_arready;                                             // mm_interconnect_1:hps_h2f_lw_axi_master_arready -> hps:h2f_lw_ARREADY
	wire  [31:0] hps_h2f_lw_axi_master_rdata;                                               // mm_interconnect_1:hps_h2f_lw_axi_master_rdata -> hps:h2f_lw_RDATA
	wire         hps_h2f_lw_axi_master_awready;                                             // mm_interconnect_1:hps_h2f_lw_axi_master_awready -> hps:h2f_lw_AWREADY
	wire   [1:0] hps_h2f_lw_axi_master_arburst;                                             // hps:h2f_lw_ARBURST -> mm_interconnect_1:hps_h2f_lw_axi_master_arburst
	wire   [2:0] hps_h2f_lw_axi_master_arsize;                                              // hps:h2f_lw_ARSIZE -> mm_interconnect_1:hps_h2f_lw_axi_master_arsize
	wire         hps_h2f_lw_axi_master_bready;                                              // hps:h2f_lw_BREADY -> mm_interconnect_1:hps_h2f_lw_axi_master_bready
	wire         hps_h2f_lw_axi_master_rlast;                                               // mm_interconnect_1:hps_h2f_lw_axi_master_rlast -> hps:h2f_lw_RLAST
	wire         hps_h2f_lw_axi_master_wlast;                                               // hps:h2f_lw_WLAST -> mm_interconnect_1:hps_h2f_lw_axi_master_wlast
	wire   [1:0] hps_h2f_lw_axi_master_rresp;                                               // mm_interconnect_1:hps_h2f_lw_axi_master_rresp -> hps:h2f_lw_RRESP
	wire  [11:0] hps_h2f_lw_axi_master_awid;                                                // hps:h2f_lw_AWID -> mm_interconnect_1:hps_h2f_lw_axi_master_awid
	wire  [11:0] hps_h2f_lw_axi_master_bid;                                                 // mm_interconnect_1:hps_h2f_lw_axi_master_bid -> hps:h2f_lw_BID
	wire         hps_h2f_lw_axi_master_bvalid;                                              // mm_interconnect_1:hps_h2f_lw_axi_master_bvalid -> hps:h2f_lw_BVALID
	wire   [2:0] hps_h2f_lw_axi_master_awsize;                                              // hps:h2f_lw_AWSIZE -> mm_interconnect_1:hps_h2f_lw_axi_master_awsize
	wire         hps_h2f_lw_axi_master_awvalid;                                             // hps:h2f_lw_AWVALID -> mm_interconnect_1:hps_h2f_lw_axi_master_awvalid
	wire         hps_h2f_lw_axi_master_rvalid;                                              // mm_interconnect_1:hps_h2f_lw_axi_master_rvalid -> hps:h2f_lw_RVALID
	wire  [31:0] mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_readdata;   // vide_dma_controller:slave_readdata -> mm_interconnect_1:vide_dma_controller_avalon_dma_control_slave_readdata
	wire   [1:0] mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_address;    // mm_interconnect_1:vide_dma_controller_avalon_dma_control_slave_address -> vide_dma_controller:slave_address
	wire         mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_read;       // mm_interconnect_1:vide_dma_controller_avalon_dma_control_slave_read -> vide_dma_controller:slave_read
	wire   [3:0] mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_byteenable; // mm_interconnect_1:vide_dma_controller_avalon_dma_control_slave_byteenable -> vide_dma_controller:slave_byteenable
	wire         mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_write;      // mm_interconnect_1:vide_dma_controller_avalon_dma_control_slave_write -> vide_dma_controller:slave_write
	wire  [31:0] mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_writedata;  // mm_interconnect_1:vide_dma_controller_avalon_dma_control_slave_writedata -> vide_dma_controller:slave_writedata
	wire  [31:0] mm_interconnect_1_alpha_blender_stream_0_s0_readdata;                      // Alpha_Blender_stream_0:avs_s0_readdata -> mm_interconnect_1:Alpha_Blender_stream_0_s0_readdata
	wire   [7:0] mm_interconnect_1_alpha_blender_stream_0_s0_address;                       // mm_interconnect_1:Alpha_Blender_stream_0_s0_address -> Alpha_Blender_stream_0:avs_s0_address
	wire         mm_interconnect_1_alpha_blender_stream_0_s0_read;                          // mm_interconnect_1:Alpha_Blender_stream_0_s0_read -> Alpha_Blender_stream_0:avs_s0_read
	wire         mm_interconnect_1_alpha_blender_stream_0_s0_write;                         // mm_interconnect_1:Alpha_Blender_stream_0_s0_write -> Alpha_Blender_stream_0:avs_s0_write
	wire  [31:0] mm_interconnect_1_alpha_blender_stream_0_s0_writedata;                     // mm_interconnect_1:Alpha_Blender_stream_0_s0_writedata -> Alpha_Blender_stream_0:avs_s0_writedata
	wire         mm_interconnect_1_led_indication_s1_chipselect;                            // mm_interconnect_1:led_indication_s1_chipselect -> led_indication:chipselect
	wire  [31:0] mm_interconnect_1_led_indication_s1_readdata;                              // led_indication:readdata -> mm_interconnect_1:led_indication_s1_readdata
	wire   [1:0] mm_interconnect_1_led_indication_s1_address;                               // mm_interconnect_1:led_indication_s1_address -> led_indication:address
	wire         mm_interconnect_1_led_indication_s1_write;                                 // mm_interconnect_1:led_indication_s1_write -> led_indication:write_n
	wire  [31:0] mm_interconnect_1_led_indication_s1_writedata;                             // mm_interconnect_1:led_indication_s1_writedata -> led_indication:writedata
	wire         rst_controller_reset_out_reset;                                            // rst_controller:reset_out -> [Alpha_Blender_stream_0:reset_reset, DMA_CONTROLLER_CITANJE:reset, DMA_CONTROLLER_UPIS:reset, affine_matrix:reset, affine_matrix:reset2, histogram_memory:reset, histogram_memory:reset2, led_indication:reset_n, mm_interconnect_0:vide_dma_controller_reset_reset_bridge_in_reset_reset, mm_interconnect_1:vide_dma_controller_reset_reset_bridge_in_reset_reset, rst_translator:in_reset, sdram_controller:reset_n, vide_dma_controller:reset, video_dual_clock_buffer:reset_stream_in]
	wire         rst_controller_reset_out_reset_req;                                        // rst_controller:reset_req -> [affine_matrix:reset_req, affine_matrix:reset_req2, histogram_memory:reset_req, histogram_memory:reset_req2, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;                                        // rst_controller_001:reset_out -> [video_dual_clock_buffer:reset_stream_out, video_rgb_resampler_0:reset, video_vga_controller:reset]
	wire         rst_controller_002_reset_out_reset;                                        // rst_controller_002:reset_out -> [mm_interconnect_0:hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_1:hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset]

	Alpha_Blender alpha_blender_stream_0 (
		.avs_s0_address         (mm_interconnect_1_alpha_blender_stream_0_s0_address),   //    s0.address
		.avs_s0_read            (mm_interconnect_1_alpha_blender_stream_0_s0_read),      //      .read
		.avs_s0_readdata        (mm_interconnect_1_alpha_blender_stream_0_s0_readdata),  //      .readdata
		.avs_s0_write           (mm_interconnect_1_alpha_blender_stream_0_s0_write),     //      .write
		.avs_s0_writedata       (mm_interconnect_1_alpha_blender_stream_0_s0_writedata), //      .writedata
		.asi_in0_data           (vide_dma_controller_avalon_pixel_source_data),          //   in0.data
		.asi_in0_ready          (vide_dma_controller_avalon_pixel_source_ready),         //      .ready
		.asi_in0_valid          (vide_dma_controller_avalon_pixel_source_valid),         //      .valid
		.asi_in0_endofpacket    (vide_dma_controller_avalon_pixel_source_endofpacket),   //      .endofpacket
		.asi_in0_startofpacket  (vide_dma_controller_avalon_pixel_source_startofpacket), //      .startofpacket
		.aso_out0_data          (alpha_blender_stream_0_out0_data),                      //  out0.data
		.aso_out0_ready         (alpha_blender_stream_0_out0_ready),                     //      .ready
		.aso_out0_valid         (alpha_blender_stream_0_out0_valid),                     //      .valid
		.aso_out0_endofpacket   (alpha_blender_stream_0_out0_endofpacket),               //      .endofpacket
		.aso_out0_startofpacket (alpha_blender_stream_0_out0_startofpacket),             //      .startofpacket
		.reset_reset            (rst_controller_reset_out_reset),                        // reset.reset
		.clock_clk              (sys_sdram_pll_sys_clk_clk)                              // clock.clk
	);

	VideoBox_DMA_CONTROLLER_CITANJE dma_controller_citanje (
		.clk                  (sys_sdram_pll_sys_clk_clk),      //                      clk.clk
		.reset                (rst_controller_reset_out_reset), //                    reset.reset
		.master_address       (),                               //        avalon_dma_master.address
		.master_waitrequest   (),                               //                         .waitrequest
		.master_arbiterlock   (),                               //                         .lock
		.master_read          (),                               //                         .read
		.master_readdata      (),                               //                         .readdata
		.master_readdatavalid (),                               //                         .readdatavalid
		.slave_address        (),                               // avalon_dma_control_slave.address
		.slave_byteenable     (),                               //                         .byteenable
		.slave_read           (),                               //                         .read
		.slave_write          (),                               //                         .write
		.slave_writedata      (),                               //                         .writedata
		.slave_readdata       (),                               //                         .readdata
		.stream_ready         (),                               //      avalon_pixel_source.ready
		.stream_data          (),                               //                         .data
		.stream_startofpacket (),                               //                         .startofpacket
		.stream_endofpacket   (),                               //                         .endofpacket
		.stream_valid         ()                                //                         .valid
	);

	VideoBox_DMA_CONTROLLER_UPIS dma_controller_upis (
		.clk                  (sys_sdram_pll_sys_clk_clk),      //                      clk.clk
		.reset                (rst_controller_reset_out_reset), //                    reset.reset
		.stream_data          (),                               //          avalon_dma_sink.data
		.stream_startofpacket (),                               //                         .startofpacket
		.stream_endofpacket   (),                               //                         .endofpacket
		.stream_valid         (),                               //                         .valid
		.stream_ready         (),                               //                         .ready
		.slave_address        (),                               // avalon_dma_control_slave.address
		.slave_byteenable     (),                               //                         .byteenable
		.slave_read           (),                               //                         .read
		.slave_write          (),                               //                         .write
		.slave_writedata      (),                               //                         .writedata
		.slave_readdata       (),                               //                         .readdata
		.master_address       (),                               //        avalon_dma_master.address
		.master_waitrequest   (),                               //                         .waitrequest
		.master_write         (),                               //                         .write
		.master_writedata     ()                                //                         .writedata
	);

	VideoBox_affine_matrix affine_matrix (
		.clk         (sys_sdram_pll_sys_clk_clk),                     //   clk1.clk
		.address     (mm_interconnect_0_affine_matrix_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_affine_matrix_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_affine_matrix_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_affine_matrix_s1_write),      //       .write
		.readdata    (mm_interconnect_0_affine_matrix_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_affine_matrix_s1_writedata),  //       .writedata
		.byteenable  (mm_interconnect_0_affine_matrix_s1_byteenable), //       .byteenable
		.reset       (rst_controller_reset_out_reset),                // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),            //       .reset_req
		.address2    (),                                              //     s2.address
		.chipselect2 (),                                              //       .chipselect
		.clken2      (),                                              //       .clken
		.write2      (),                                              //       .write
		.readdata2   (),                                              //       .readdata
		.writedata2  (),                                              //       .writedata
		.byteenable2 (),                                              //       .byteenable
		.clk2        (sys_sdram_pll_sys_clk_clk),                     //   clk2.clk
		.reset2      (rst_controller_reset_out_reset),                // reset2.reset
		.reset_req2  (rst_controller_reset_out_reset_req),            //       .reset_req
		.freeze      (1'b0)                                           // (terminated)
	);

	VideoBox_histogram_memory histogram_memory (
		.clk         (sys_sdram_pll_sys_clk_clk),                        //   clk1.clk
		.address     (mm_interconnect_0_histogram_memory_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_histogram_memory_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_histogram_memory_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_histogram_memory_s1_write),      //       .write
		.readdata    (mm_interconnect_0_histogram_memory_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_histogram_memory_s1_writedata),  //       .writedata
		.byteenable  (mm_interconnect_0_histogram_memory_s1_byteenable), //       .byteenable
		.reset       (rst_controller_reset_out_reset),                   // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),               //       .reset_req
		.address2    (),                                                 //     s2.address
		.chipselect2 (),                                                 //       .chipselect
		.clken2      (),                                                 //       .clken
		.write2      (),                                                 //       .write
		.readdata2   (),                                                 //       .readdata
		.writedata2  (),                                                 //       .writedata
		.byteenable2 (),                                                 //       .byteenable
		.clk2        (sys_sdram_pll_sys_clk_clk),                        //   clk2.clk
		.reset2      (rst_controller_reset_out_reset),                   // reset2.reset
		.reset_req2  (rst_controller_reset_out_reset_req),               //       .reset_req
		.freeze      (1'b0)                                              // (terminated)
	);

	VideoBox_hps #(
		.F2S_Width (0),
		.S2F_Width (2)
	) hps (
		.mem_a          (memory_mem_a),                  //            memory.mem_a
		.mem_ba         (memory_mem_ba),                 //                  .mem_ba
		.mem_ck         (memory_mem_ck),                 //                  .mem_ck
		.mem_ck_n       (memory_mem_ck_n),               //                  .mem_ck_n
		.mem_cke        (memory_mem_cke),                //                  .mem_cke
		.mem_cs_n       (memory_mem_cs_n),               //                  .mem_cs_n
		.mem_ras_n      (memory_mem_ras_n),              //                  .mem_ras_n
		.mem_cas_n      (memory_mem_cas_n),              //                  .mem_cas_n
		.mem_we_n       (memory_mem_we_n),               //                  .mem_we_n
		.mem_reset_n    (memory_mem_reset_n),            //                  .mem_reset_n
		.mem_dq         (memory_mem_dq),                 //                  .mem_dq
		.mem_dqs        (memory_mem_dqs),                //                  .mem_dqs
		.mem_dqs_n      (memory_mem_dqs_n),              //                  .mem_dqs_n
		.mem_odt        (memory_mem_odt),                //                  .mem_odt
		.mem_dm         (memory_mem_dm),                 //                  .mem_dm
		.oct_rzqin      (memory_oct_rzqin),              //                  .oct_rzqin
		.h2f_rst_n      (hps_h2f_reset_reset),           //         h2f_reset.reset_n
		.h2f_axi_clk    (sys_sdram_pll_sys_clk_clk),     //     h2f_axi_clock.clk
		.h2f_AWID       (hps_h2f_axi_master_awid),       //    h2f_axi_master.awid
		.h2f_AWADDR     (hps_h2f_axi_master_awaddr),     //                  .awaddr
		.h2f_AWLEN      (hps_h2f_axi_master_awlen),      //                  .awlen
		.h2f_AWSIZE     (hps_h2f_axi_master_awsize),     //                  .awsize
		.h2f_AWBURST    (hps_h2f_axi_master_awburst),    //                  .awburst
		.h2f_AWLOCK     (hps_h2f_axi_master_awlock),     //                  .awlock
		.h2f_AWCACHE    (hps_h2f_axi_master_awcache),    //                  .awcache
		.h2f_AWPROT     (hps_h2f_axi_master_awprot),     //                  .awprot
		.h2f_AWVALID    (hps_h2f_axi_master_awvalid),    //                  .awvalid
		.h2f_AWREADY    (hps_h2f_axi_master_awready),    //                  .awready
		.h2f_WID        (hps_h2f_axi_master_wid),        //                  .wid
		.h2f_WDATA      (hps_h2f_axi_master_wdata),      //                  .wdata
		.h2f_WSTRB      (hps_h2f_axi_master_wstrb),      //                  .wstrb
		.h2f_WLAST      (hps_h2f_axi_master_wlast),      //                  .wlast
		.h2f_WVALID     (hps_h2f_axi_master_wvalid),     //                  .wvalid
		.h2f_WREADY     (hps_h2f_axi_master_wready),     //                  .wready
		.h2f_BID        (hps_h2f_axi_master_bid),        //                  .bid
		.h2f_BRESP      (hps_h2f_axi_master_bresp),      //                  .bresp
		.h2f_BVALID     (hps_h2f_axi_master_bvalid),     //                  .bvalid
		.h2f_BREADY     (hps_h2f_axi_master_bready),     //                  .bready
		.h2f_ARID       (hps_h2f_axi_master_arid),       //                  .arid
		.h2f_ARADDR     (hps_h2f_axi_master_araddr),     //                  .araddr
		.h2f_ARLEN      (hps_h2f_axi_master_arlen),      //                  .arlen
		.h2f_ARSIZE     (hps_h2f_axi_master_arsize),     //                  .arsize
		.h2f_ARBURST    (hps_h2f_axi_master_arburst),    //                  .arburst
		.h2f_ARLOCK     (hps_h2f_axi_master_arlock),     //                  .arlock
		.h2f_ARCACHE    (hps_h2f_axi_master_arcache),    //                  .arcache
		.h2f_ARPROT     (hps_h2f_axi_master_arprot),     //                  .arprot
		.h2f_ARVALID    (hps_h2f_axi_master_arvalid),    //                  .arvalid
		.h2f_ARREADY    (hps_h2f_axi_master_arready),    //                  .arready
		.h2f_RID        (hps_h2f_axi_master_rid),        //                  .rid
		.h2f_RDATA      (hps_h2f_axi_master_rdata),      //                  .rdata
		.h2f_RRESP      (hps_h2f_axi_master_rresp),      //                  .rresp
		.h2f_RLAST      (hps_h2f_axi_master_rlast),      //                  .rlast
		.h2f_RVALID     (hps_h2f_axi_master_rvalid),     //                  .rvalid
		.h2f_RREADY     (hps_h2f_axi_master_rready),     //                  .rready
		.h2f_lw_axi_clk (sys_sdram_pll_sys_clk_clk),     //  h2f_lw_axi_clock.clk
		.h2f_lw_AWID    (hps_h2f_lw_axi_master_awid),    // h2f_lw_axi_master.awid
		.h2f_lw_AWADDR  (hps_h2f_lw_axi_master_awaddr),  //                  .awaddr
		.h2f_lw_AWLEN   (hps_h2f_lw_axi_master_awlen),   //                  .awlen
		.h2f_lw_AWSIZE  (hps_h2f_lw_axi_master_awsize),  //                  .awsize
		.h2f_lw_AWBURST (hps_h2f_lw_axi_master_awburst), //                  .awburst
		.h2f_lw_AWLOCK  (hps_h2f_lw_axi_master_awlock),  //                  .awlock
		.h2f_lw_AWCACHE (hps_h2f_lw_axi_master_awcache), //                  .awcache
		.h2f_lw_AWPROT  (hps_h2f_lw_axi_master_awprot),  //                  .awprot
		.h2f_lw_AWVALID (hps_h2f_lw_axi_master_awvalid), //                  .awvalid
		.h2f_lw_AWREADY (hps_h2f_lw_axi_master_awready), //                  .awready
		.h2f_lw_WID     (hps_h2f_lw_axi_master_wid),     //                  .wid
		.h2f_lw_WDATA   (hps_h2f_lw_axi_master_wdata),   //                  .wdata
		.h2f_lw_WSTRB   (hps_h2f_lw_axi_master_wstrb),   //                  .wstrb
		.h2f_lw_WLAST   (hps_h2f_lw_axi_master_wlast),   //                  .wlast
		.h2f_lw_WVALID  (hps_h2f_lw_axi_master_wvalid),  //                  .wvalid
		.h2f_lw_WREADY  (hps_h2f_lw_axi_master_wready),  //                  .wready
		.h2f_lw_BID     (hps_h2f_lw_axi_master_bid),     //                  .bid
		.h2f_lw_BRESP   (hps_h2f_lw_axi_master_bresp),   //                  .bresp
		.h2f_lw_BVALID  (hps_h2f_lw_axi_master_bvalid),  //                  .bvalid
		.h2f_lw_BREADY  (hps_h2f_lw_axi_master_bready),  //                  .bready
		.h2f_lw_ARID    (hps_h2f_lw_axi_master_arid),    //                  .arid
		.h2f_lw_ARADDR  (hps_h2f_lw_axi_master_araddr),  //                  .araddr
		.h2f_lw_ARLEN   (hps_h2f_lw_axi_master_arlen),   //                  .arlen
		.h2f_lw_ARSIZE  (hps_h2f_lw_axi_master_arsize),  //                  .arsize
		.h2f_lw_ARBURST (hps_h2f_lw_axi_master_arburst), //                  .arburst
		.h2f_lw_ARLOCK  (hps_h2f_lw_axi_master_arlock),  //                  .arlock
		.h2f_lw_ARCACHE (hps_h2f_lw_axi_master_arcache), //                  .arcache
		.h2f_lw_ARPROT  (hps_h2f_lw_axi_master_arprot),  //                  .arprot
		.h2f_lw_ARVALID (hps_h2f_lw_axi_master_arvalid), //                  .arvalid
		.h2f_lw_ARREADY (hps_h2f_lw_axi_master_arready), //                  .arready
		.h2f_lw_RID     (hps_h2f_lw_axi_master_rid),     //                  .rid
		.h2f_lw_RDATA   (hps_h2f_lw_axi_master_rdata),   //                  .rdata
		.h2f_lw_RRESP   (hps_h2f_lw_axi_master_rresp),   //                  .rresp
		.h2f_lw_RLAST   (hps_h2f_lw_axi_master_rlast),   //                  .rlast
		.h2f_lw_RVALID  (hps_h2f_lw_axi_master_rvalid),  //                  .rvalid
		.h2f_lw_RREADY  (hps_h2f_lw_axi_master_rready)   //                  .rready
	);

	VideoBox_led_indication led_indication (
		.clk        (sys_sdram_pll_sys_clk_clk),                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //               reset.reset_n
		.address    (mm_interconnect_1_led_indication_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_1_led_indication_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_1_led_indication_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_1_led_indication_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_1_led_indication_s1_readdata),   //                    .readdata
		.out_port   (led_bus_export)                                  // external_connection.export
	);

	VideoBox_sdram_controller sdram_controller (
		.clk            (sys_sdram_pll_sys_clk_clk),                           //   clk.clk
		.reset_n        (~rst_controller_reset_out_reset),                     // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_controller_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_controller_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_controller_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_controller_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_controller_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_controller_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_controller_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_controller_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_controller_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_bus_addr),                                      //  wire.export
		.zs_ba          (sdram_bus_ba),                                        //      .export
		.zs_cas_n       (sdram_bus_cas_n),                                     //      .export
		.zs_cke         (sdram_bus_cke),                                       //      .export
		.zs_cs_n        (sdram_bus_cs_n),                                      //      .export
		.zs_dq          (sdram_bus_dq),                                        //      .export
		.zs_dqm         (sdram_bus_dqm),                                       //      .export
		.zs_ras_n       (sdram_bus_ras_n),                                     //      .export
		.zs_we_n        (sdram_bus_we_n)                                       //      .export
	);

	VideoBox_sys_sdram_pll sys_sdram_pll (
		.ref_clk_clk        (ref_clock_clk),                    //      ref_clk.clk
		.ref_reset_reset    (~hps_h2f_reset_reset),             //    ref_reset.reset
		.sys_clk_clk        (sys_sdram_pll_sys_clk_clk),        //      sys_clk.clk
		.sdram_clk_clk      (sdram_clock_clk),                  //    sdram_clk.clk
		.reset_source_reset (sys_sdram_pll_reset_source_reset)  // reset_source.reset
	);

	VideoBox_vga_pll vga_pll (
		.refclk   (sys_sdram_pll_sys_clk_clk),        //  refclk.clk
		.rst      (sys_sdram_pll_reset_source_reset), //   reset.reset
		.outclk_0 (vga_pll_outclk0_clk),              // outclk0.clk
		.locked   ()                                  //  locked.export
	);

	VideoBox_DMA_CONTROLLER_CITANJE vide_dma_controller (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                 //                      clk.clk
		.reset                (rst_controller_reset_out_reset),                                            //                    reset.reset
		.master_address       (vide_dma_controller_avalon_dma_master_address),                             //        avalon_dma_master.address
		.master_waitrequest   (vide_dma_controller_avalon_dma_master_waitrequest),                         //                         .waitrequest
		.master_arbiterlock   (vide_dma_controller_avalon_dma_master_lock),                                //                         .lock
		.master_read          (vide_dma_controller_avalon_dma_master_read),                                //                         .read
		.master_readdata      (vide_dma_controller_avalon_dma_master_readdata),                            //                         .readdata
		.master_readdatavalid (vide_dma_controller_avalon_dma_master_readdatavalid),                       //                         .readdatavalid
		.slave_address        (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_address),    // avalon_dma_control_slave.address
		.slave_byteenable     (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_byteenable), //                         .byteenable
		.slave_read           (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_read),       //                         .read
		.slave_write          (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_write),      //                         .write
		.slave_writedata      (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_writedata),  //                         .writedata
		.slave_readdata       (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_readdata),   //                         .readdata
		.stream_ready         (vide_dma_controller_avalon_pixel_source_ready),                             //      avalon_pixel_source.ready
		.stream_data          (vide_dma_controller_avalon_pixel_source_data),                              //                         .data
		.stream_startofpacket (vide_dma_controller_avalon_pixel_source_startofpacket),                     //                         .startofpacket
		.stream_endofpacket   (vide_dma_controller_avalon_pixel_source_endofpacket),                       //                         .endofpacket
		.stream_valid         (vide_dma_controller_avalon_pixel_source_valid)                              //                         .valid
	);

	VideoBox_video_dual_clock_buffer video_dual_clock_buffer (
		.clk_stream_in            (sys_sdram_pll_sys_clk_clk),                                     //         clock_stream_in.clk
		.reset_stream_in          (rst_controller_reset_out_reset),                                //         reset_stream_in.reset
		.clk_stream_out           (vga_pll_outclk0_clk),                                           //        clock_stream_out.clk
		.reset_stream_out         (rst_controller_001_reset_out_reset),                            //        reset_stream_out.reset
		.stream_in_ready          (alpha_blender_stream_0_out0_ready),                             //   avalon_dc_buffer_sink.ready
		.stream_in_startofpacket  (alpha_blender_stream_0_out0_startofpacket),                     //                        .startofpacket
		.stream_in_endofpacket    (alpha_blender_stream_0_out0_endofpacket),                       //                        .endofpacket
		.stream_in_valid          (alpha_blender_stream_0_out0_valid),                             //                        .valid
		.stream_in_data           (alpha_blender_stream_0_out0_data),                              //                        .data
		.stream_out_ready         (video_dual_clock_buffer_avalon_dc_buffer_source_ready),         // avalon_dc_buffer_source.ready
		.stream_out_startofpacket (video_dual_clock_buffer_avalon_dc_buffer_source_startofpacket), //                        .startofpacket
		.stream_out_endofpacket   (video_dual_clock_buffer_avalon_dc_buffer_source_endofpacket),   //                        .endofpacket
		.stream_out_valid         (video_dual_clock_buffer_avalon_dc_buffer_source_valid),         //                        .valid
		.stream_out_data          (video_dual_clock_buffer_avalon_dc_buffer_source_data)           //                        .data
	);

	VideoBox_video_rgb_resampler_0 video_rgb_resampler_0 (
		.clk                      (vga_pll_outclk0_clk),                                           //               clk.clk
		.reset                    (rst_controller_001_reset_out_reset),                            //             reset.reset
		.stream_in_startofpacket  (video_dual_clock_buffer_avalon_dc_buffer_source_startofpacket), //   avalon_rgb_sink.startofpacket
		.stream_in_endofpacket    (video_dual_clock_buffer_avalon_dc_buffer_source_endofpacket),   //                  .endofpacket
		.stream_in_valid          (video_dual_clock_buffer_avalon_dc_buffer_source_valid),         //                  .valid
		.stream_in_ready          (video_dual_clock_buffer_avalon_dc_buffer_source_ready),         //                  .ready
		.stream_in_data           (video_dual_clock_buffer_avalon_dc_buffer_source_data),          //                  .data
		.stream_out_ready         (video_rgb_resampler_0_avalon_rgb_source_ready),                 // avalon_rgb_source.ready
		.stream_out_startofpacket (video_rgb_resampler_0_avalon_rgb_source_startofpacket),         //                  .startofpacket
		.stream_out_endofpacket   (video_rgb_resampler_0_avalon_rgb_source_endofpacket),           //                  .endofpacket
		.stream_out_valid         (video_rgb_resampler_0_avalon_rgb_source_valid),                 //                  .valid
		.stream_out_data          (video_rgb_resampler_0_avalon_rgb_source_data)                   //                  .data
	);

	VideoBox_video_vga_controller video_vga_controller (
		.clk           (vga_pll_outclk0_clk),                                   //                clk.clk
		.reset         (rst_controller_001_reset_out_reset),                    //              reset.reset
		.data          (video_rgb_resampler_0_avalon_rgb_source_data),          //    avalon_vga_sink.data
		.startofpacket (video_rgb_resampler_0_avalon_rgb_source_startofpacket), //                   .startofpacket
		.endofpacket   (video_rgb_resampler_0_avalon_rgb_source_endofpacket),   //                   .endofpacket
		.valid         (video_rgb_resampler_0_avalon_rgb_source_valid),         //                   .valid
		.ready         (video_rgb_resampler_0_avalon_rgb_source_ready),         //                   .ready
		.VGA_CLK       (vga_bus_CLK),                                           // external_interface.export
		.VGA_HS        (vga_bus_HS),                                            //                   .export
		.VGA_VS        (vga_bus_VS),                                            //                   .export
		.VGA_BLANK     (vga_bus_BLANK),                                         //                   .export
		.VGA_SYNC      (vga_bus_SYNC),                                          //                   .export
		.VGA_R         (vga_bus_R),                                             //                   .export
		.VGA_G         (vga_bus_G),                                             //                   .export
		.VGA_B         (vga_bus_B)                                              //                   .export
	);

	VideoBox_mm_interconnect_0 mm_interconnect_0 (
		.hps_h2f_axi_master_awid                                        (hps_h2f_axi_master_awid),                             //                                       hps_h2f_axi_master.awid
		.hps_h2f_axi_master_awaddr                                      (hps_h2f_axi_master_awaddr),                           //                                                         .awaddr
		.hps_h2f_axi_master_awlen                                       (hps_h2f_axi_master_awlen),                            //                                                         .awlen
		.hps_h2f_axi_master_awsize                                      (hps_h2f_axi_master_awsize),                           //                                                         .awsize
		.hps_h2f_axi_master_awburst                                     (hps_h2f_axi_master_awburst),                          //                                                         .awburst
		.hps_h2f_axi_master_awlock                                      (hps_h2f_axi_master_awlock),                           //                                                         .awlock
		.hps_h2f_axi_master_awcache                                     (hps_h2f_axi_master_awcache),                          //                                                         .awcache
		.hps_h2f_axi_master_awprot                                      (hps_h2f_axi_master_awprot),                           //                                                         .awprot
		.hps_h2f_axi_master_awvalid                                     (hps_h2f_axi_master_awvalid),                          //                                                         .awvalid
		.hps_h2f_axi_master_awready                                     (hps_h2f_axi_master_awready),                          //                                                         .awready
		.hps_h2f_axi_master_wid                                         (hps_h2f_axi_master_wid),                              //                                                         .wid
		.hps_h2f_axi_master_wdata                                       (hps_h2f_axi_master_wdata),                            //                                                         .wdata
		.hps_h2f_axi_master_wstrb                                       (hps_h2f_axi_master_wstrb),                            //                                                         .wstrb
		.hps_h2f_axi_master_wlast                                       (hps_h2f_axi_master_wlast),                            //                                                         .wlast
		.hps_h2f_axi_master_wvalid                                      (hps_h2f_axi_master_wvalid),                           //                                                         .wvalid
		.hps_h2f_axi_master_wready                                      (hps_h2f_axi_master_wready),                           //                                                         .wready
		.hps_h2f_axi_master_bid                                         (hps_h2f_axi_master_bid),                              //                                                         .bid
		.hps_h2f_axi_master_bresp                                       (hps_h2f_axi_master_bresp),                            //                                                         .bresp
		.hps_h2f_axi_master_bvalid                                      (hps_h2f_axi_master_bvalid),                           //                                                         .bvalid
		.hps_h2f_axi_master_bready                                      (hps_h2f_axi_master_bready),                           //                                                         .bready
		.hps_h2f_axi_master_arid                                        (hps_h2f_axi_master_arid),                             //                                                         .arid
		.hps_h2f_axi_master_araddr                                      (hps_h2f_axi_master_araddr),                           //                                                         .araddr
		.hps_h2f_axi_master_arlen                                       (hps_h2f_axi_master_arlen),                            //                                                         .arlen
		.hps_h2f_axi_master_arsize                                      (hps_h2f_axi_master_arsize),                           //                                                         .arsize
		.hps_h2f_axi_master_arburst                                     (hps_h2f_axi_master_arburst),                          //                                                         .arburst
		.hps_h2f_axi_master_arlock                                      (hps_h2f_axi_master_arlock),                           //                                                         .arlock
		.hps_h2f_axi_master_arcache                                     (hps_h2f_axi_master_arcache),                          //                                                         .arcache
		.hps_h2f_axi_master_arprot                                      (hps_h2f_axi_master_arprot),                           //                                                         .arprot
		.hps_h2f_axi_master_arvalid                                     (hps_h2f_axi_master_arvalid),                          //                                                         .arvalid
		.hps_h2f_axi_master_arready                                     (hps_h2f_axi_master_arready),                          //                                                         .arready
		.hps_h2f_axi_master_rid                                         (hps_h2f_axi_master_rid),                              //                                                         .rid
		.hps_h2f_axi_master_rdata                                       (hps_h2f_axi_master_rdata),                            //                                                         .rdata
		.hps_h2f_axi_master_rresp                                       (hps_h2f_axi_master_rresp),                            //                                                         .rresp
		.hps_h2f_axi_master_rlast                                       (hps_h2f_axi_master_rlast),                            //                                                         .rlast
		.hps_h2f_axi_master_rvalid                                      (hps_h2f_axi_master_rvalid),                           //                                                         .rvalid
		.hps_h2f_axi_master_rready                                      (hps_h2f_axi_master_rready),                           //                                                         .rready
		.sys_sdram_pll_sys_clk_clk                                      (sys_sdram_pll_sys_clk_clk),                           //                                    sys_sdram_pll_sys_clk.clk
		.hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),                  // hps_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		.vide_dma_controller_reset_reset_bridge_in_reset_reset          (rst_controller_reset_out_reset),                      //          vide_dma_controller_reset_reset_bridge_in_reset.reset
		.vide_dma_controller_avalon_dma_master_address                  (vide_dma_controller_avalon_dma_master_address),       //                    vide_dma_controller_avalon_dma_master.address
		.vide_dma_controller_avalon_dma_master_waitrequest              (vide_dma_controller_avalon_dma_master_waitrequest),   //                                                         .waitrequest
		.vide_dma_controller_avalon_dma_master_read                     (vide_dma_controller_avalon_dma_master_read),          //                                                         .read
		.vide_dma_controller_avalon_dma_master_readdata                 (vide_dma_controller_avalon_dma_master_readdata),      //                                                         .readdata
		.vide_dma_controller_avalon_dma_master_readdatavalid            (vide_dma_controller_avalon_dma_master_readdatavalid), //                                                         .readdatavalid
		.vide_dma_controller_avalon_dma_master_lock                     (vide_dma_controller_avalon_dma_master_lock),          //                                                         .lock
		.affine_matrix_s1_address                                       (mm_interconnect_0_affine_matrix_s1_address),          //                                         affine_matrix_s1.address
		.affine_matrix_s1_write                                         (mm_interconnect_0_affine_matrix_s1_write),            //                                                         .write
		.affine_matrix_s1_readdata                                      (mm_interconnect_0_affine_matrix_s1_readdata),         //                                                         .readdata
		.affine_matrix_s1_writedata                                     (mm_interconnect_0_affine_matrix_s1_writedata),        //                                                         .writedata
		.affine_matrix_s1_byteenable                                    (mm_interconnect_0_affine_matrix_s1_byteenable),       //                                                         .byteenable
		.affine_matrix_s1_chipselect                                    (mm_interconnect_0_affine_matrix_s1_chipselect),       //                                                         .chipselect
		.affine_matrix_s1_clken                                         (mm_interconnect_0_affine_matrix_s1_clken),            //                                                         .clken
		.histogram_memory_s1_address                                    (mm_interconnect_0_histogram_memory_s1_address),       //                                      histogram_memory_s1.address
		.histogram_memory_s1_write                                      (mm_interconnect_0_histogram_memory_s1_write),         //                                                         .write
		.histogram_memory_s1_readdata                                   (mm_interconnect_0_histogram_memory_s1_readdata),      //                                                         .readdata
		.histogram_memory_s1_writedata                                  (mm_interconnect_0_histogram_memory_s1_writedata),     //                                                         .writedata
		.histogram_memory_s1_byteenable                                 (mm_interconnect_0_histogram_memory_s1_byteenable),    //                                                         .byteenable
		.histogram_memory_s1_chipselect                                 (mm_interconnect_0_histogram_memory_s1_chipselect),    //                                                         .chipselect
		.histogram_memory_s1_clken                                      (mm_interconnect_0_histogram_memory_s1_clken),         //                                                         .clken
		.sdram_controller_s1_address                                    (mm_interconnect_0_sdram_controller_s1_address),       //                                      sdram_controller_s1.address
		.sdram_controller_s1_write                                      (mm_interconnect_0_sdram_controller_s1_write),         //                                                         .write
		.sdram_controller_s1_read                                       (mm_interconnect_0_sdram_controller_s1_read),          //                                                         .read
		.sdram_controller_s1_readdata                                   (mm_interconnect_0_sdram_controller_s1_readdata),      //                                                         .readdata
		.sdram_controller_s1_writedata                                  (mm_interconnect_0_sdram_controller_s1_writedata),     //                                                         .writedata
		.sdram_controller_s1_byteenable                                 (mm_interconnect_0_sdram_controller_s1_byteenable),    //                                                         .byteenable
		.sdram_controller_s1_readdatavalid                              (mm_interconnect_0_sdram_controller_s1_readdatavalid), //                                                         .readdatavalid
		.sdram_controller_s1_waitrequest                                (mm_interconnect_0_sdram_controller_s1_waitrequest),   //                                                         .waitrequest
		.sdram_controller_s1_chipselect                                 (mm_interconnect_0_sdram_controller_s1_chipselect)     //                                                         .chipselect
	);

	VideoBox_mm_interconnect_1 mm_interconnect_1 (
		.hps_h2f_lw_axi_master_awid                                        (hps_h2f_lw_axi_master_awid),                                                //                                       hps_h2f_lw_axi_master.awid
		.hps_h2f_lw_axi_master_awaddr                                      (hps_h2f_lw_axi_master_awaddr),                                              //                                                            .awaddr
		.hps_h2f_lw_axi_master_awlen                                       (hps_h2f_lw_axi_master_awlen),                                               //                                                            .awlen
		.hps_h2f_lw_axi_master_awsize                                      (hps_h2f_lw_axi_master_awsize),                                              //                                                            .awsize
		.hps_h2f_lw_axi_master_awburst                                     (hps_h2f_lw_axi_master_awburst),                                             //                                                            .awburst
		.hps_h2f_lw_axi_master_awlock                                      (hps_h2f_lw_axi_master_awlock),                                              //                                                            .awlock
		.hps_h2f_lw_axi_master_awcache                                     (hps_h2f_lw_axi_master_awcache),                                             //                                                            .awcache
		.hps_h2f_lw_axi_master_awprot                                      (hps_h2f_lw_axi_master_awprot),                                              //                                                            .awprot
		.hps_h2f_lw_axi_master_awvalid                                     (hps_h2f_lw_axi_master_awvalid),                                             //                                                            .awvalid
		.hps_h2f_lw_axi_master_awready                                     (hps_h2f_lw_axi_master_awready),                                             //                                                            .awready
		.hps_h2f_lw_axi_master_wid                                         (hps_h2f_lw_axi_master_wid),                                                 //                                                            .wid
		.hps_h2f_lw_axi_master_wdata                                       (hps_h2f_lw_axi_master_wdata),                                               //                                                            .wdata
		.hps_h2f_lw_axi_master_wstrb                                       (hps_h2f_lw_axi_master_wstrb),                                               //                                                            .wstrb
		.hps_h2f_lw_axi_master_wlast                                       (hps_h2f_lw_axi_master_wlast),                                               //                                                            .wlast
		.hps_h2f_lw_axi_master_wvalid                                      (hps_h2f_lw_axi_master_wvalid),                                              //                                                            .wvalid
		.hps_h2f_lw_axi_master_wready                                      (hps_h2f_lw_axi_master_wready),                                              //                                                            .wready
		.hps_h2f_lw_axi_master_bid                                         (hps_h2f_lw_axi_master_bid),                                                 //                                                            .bid
		.hps_h2f_lw_axi_master_bresp                                       (hps_h2f_lw_axi_master_bresp),                                               //                                                            .bresp
		.hps_h2f_lw_axi_master_bvalid                                      (hps_h2f_lw_axi_master_bvalid),                                              //                                                            .bvalid
		.hps_h2f_lw_axi_master_bready                                      (hps_h2f_lw_axi_master_bready),                                              //                                                            .bready
		.hps_h2f_lw_axi_master_arid                                        (hps_h2f_lw_axi_master_arid),                                                //                                                            .arid
		.hps_h2f_lw_axi_master_araddr                                      (hps_h2f_lw_axi_master_araddr),                                              //                                                            .araddr
		.hps_h2f_lw_axi_master_arlen                                       (hps_h2f_lw_axi_master_arlen),                                               //                                                            .arlen
		.hps_h2f_lw_axi_master_arsize                                      (hps_h2f_lw_axi_master_arsize),                                              //                                                            .arsize
		.hps_h2f_lw_axi_master_arburst                                     (hps_h2f_lw_axi_master_arburst),                                             //                                                            .arburst
		.hps_h2f_lw_axi_master_arlock                                      (hps_h2f_lw_axi_master_arlock),                                              //                                                            .arlock
		.hps_h2f_lw_axi_master_arcache                                     (hps_h2f_lw_axi_master_arcache),                                             //                                                            .arcache
		.hps_h2f_lw_axi_master_arprot                                      (hps_h2f_lw_axi_master_arprot),                                              //                                                            .arprot
		.hps_h2f_lw_axi_master_arvalid                                     (hps_h2f_lw_axi_master_arvalid),                                             //                                                            .arvalid
		.hps_h2f_lw_axi_master_arready                                     (hps_h2f_lw_axi_master_arready),                                             //                                                            .arready
		.hps_h2f_lw_axi_master_rid                                         (hps_h2f_lw_axi_master_rid),                                                 //                                                            .rid
		.hps_h2f_lw_axi_master_rdata                                       (hps_h2f_lw_axi_master_rdata),                                               //                                                            .rdata
		.hps_h2f_lw_axi_master_rresp                                       (hps_h2f_lw_axi_master_rresp),                                               //                                                            .rresp
		.hps_h2f_lw_axi_master_rlast                                       (hps_h2f_lw_axi_master_rlast),                                               //                                                            .rlast
		.hps_h2f_lw_axi_master_rvalid                                      (hps_h2f_lw_axi_master_rvalid),                                              //                                                            .rvalid
		.hps_h2f_lw_axi_master_rready                                      (hps_h2f_lw_axi_master_rready),                                              //                                                            .rready
		.sys_sdram_pll_sys_clk_clk                                         (sys_sdram_pll_sys_clk_clk),                                                 //                                       sys_sdram_pll_sys_clk.clk
		.hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),                                        // hps_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		.vide_dma_controller_reset_reset_bridge_in_reset_reset             (rst_controller_reset_out_reset),                                            //             vide_dma_controller_reset_reset_bridge_in_reset.reset
		.Alpha_Blender_stream_0_s0_address                                 (mm_interconnect_1_alpha_blender_stream_0_s0_address),                       //                                   Alpha_Blender_stream_0_s0.address
		.Alpha_Blender_stream_0_s0_write                                   (mm_interconnect_1_alpha_blender_stream_0_s0_write),                         //                                                            .write
		.Alpha_Blender_stream_0_s0_read                                    (mm_interconnect_1_alpha_blender_stream_0_s0_read),                          //                                                            .read
		.Alpha_Blender_stream_0_s0_readdata                                (mm_interconnect_1_alpha_blender_stream_0_s0_readdata),                      //                                                            .readdata
		.Alpha_Blender_stream_0_s0_writedata                               (mm_interconnect_1_alpha_blender_stream_0_s0_writedata),                     //                                                            .writedata
		.led_indication_s1_address                                         (mm_interconnect_1_led_indication_s1_address),                               //                                           led_indication_s1.address
		.led_indication_s1_write                                           (mm_interconnect_1_led_indication_s1_write),                                 //                                                            .write
		.led_indication_s1_readdata                                        (mm_interconnect_1_led_indication_s1_readdata),                              //                                                            .readdata
		.led_indication_s1_writedata                                       (mm_interconnect_1_led_indication_s1_writedata),                             //                                                            .writedata
		.led_indication_s1_chipselect                                      (mm_interconnect_1_led_indication_s1_chipselect),                            //                                                            .chipselect
		.vide_dma_controller_avalon_dma_control_slave_address              (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_address),    //                vide_dma_controller_avalon_dma_control_slave.address
		.vide_dma_controller_avalon_dma_control_slave_write                (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_write),      //                                                            .write
		.vide_dma_controller_avalon_dma_control_slave_read                 (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_read),       //                                                            .read
		.vide_dma_controller_avalon_dma_control_slave_readdata             (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_readdata),   //                                                            .readdata
		.vide_dma_controller_avalon_dma_control_slave_writedata            (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_writedata),  //                                                            .writedata
		.vide_dma_controller_avalon_dma_control_slave_byteenable           (mm_interconnect_1_vide_dma_controller_avalon_dma_control_slave_byteenable)  //                                                            .byteenable
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (sys_sdram_pll_reset_source_reset),   // reset_in0.reset
		.clk            (sys_sdram_pll_sys_clk_clk),          //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (sys_sdram_pll_reset_source_reset),   // reset_in0.reset
		.clk            (vga_pll_outclk0_clk),                //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~hps_h2f_reset_reset),               // reset_in0.reset
		.clk            (sys_sdram_pll_sys_clk_clk),          //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
